// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 *
 * For addresses:
 *
 * - RAM (16-bits) [0 - 16383]: 0000 0000 0000 0000 - 0011 1111 1111 1111
 * - Screen [16384 - 24575]: 0100 0000 0000 0000 - 0101 1111 1111 1111
 * - Keyboard [24576]: 0110 0000 0000 0000
 *
 * One way of filtering and directing the inputs is via the last 3 bits.
 * - 000|001: RAM
 * - 010: Screen
 * - 011: Keyboard
 *
 * To understand why mux is used, it is to prevent fetch-execution clash with the instruction and data address. To understand how the in/out works, look at the "Bit" chip (e.g. out[t + 1] = in[t], so out[t] is previous state or next instruction).
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux4Way(in=load, sel=address[13..14], a=RAM0Sel, b=RAM1Sel, c=screenSel, d=KBDSel);
    Or(a=RAM0Sel, b=RAM1Sel, out=RAMSel);

    RAM16K(in=in, load=RAMSel, address=address[0..13], out=RAMOut);
    Screen(in=in, load=screenSel, address=address[0..12], out=screenOut);
    Keyboard(out=KBDOut);

    Mux4Way16(a=RAMOut, b=RAMOut, c=screenOut, d=KBDOut, sel=address[13..14], out=out);
}